{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","state/todolists-reducer.ts","state/task-reducer.ts","AppWithRedux.tsx","store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","className","TextField","value","label","helperText","onChange","e","currentTarget","onKeyDown","key","variant","IconButton","onClick","AddBox","EditableSpan","console","log","editMode","setEditMode","activateEditMode","useCallback","activateViewMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","removeTask","id","todolistId","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","onTitleChangeHandler","newValue","changeTaskTitle","isDone","Checkbox","color","Delete","TodoList","tasksForTodolist","tasks","filter","t","addTask","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","map","Button","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","taskId","type","removeTaskAC","addTaskAC","newTitle","changeTaskTitleAC","changeStatus","changeTaskStatusAC","addTodolist","v1","addTodolistAC","changeTodolistFilterAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","allTodolistTasks","item","Paper","rootReducer","combineReducers","action","stateCopy","filteredTasks","newTask","newTasks","newTasksArray","newTaskArray","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fc64e806.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype AddItemPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo((props: AddItemPropsType) => {\n\n    const [title, setTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n\n    //title change handler\n    const onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        error !== null && setError(null);\n        setTitle(e.currentTarget.value);\n    }\n\n    //add title on key down\n    const addOnKeyDownItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem();\n        } else if (e.key === \"Escape\") {\n            setTitle(\"\");\n        }\n    }\n\n    //add item on press button\n    const addItem = () => {\n        const trimmedTitle = title.trim();\n        if (trimmedTitle !== \"\") {\n            props.addItem(trimmedTitle);\n        } else {\n            setError(\"А че так пусто?\");\n        }\n        setTitle(\"\");\n    }\n\n    return (\n        <div className=\"todoListInput\">\n            <TextField value={title}\n                       error={!!error}\n                       label={\"Title\"}\n                       helperText={error}\n                       onChange={onTitleChangeHandler}\n                       onKeyDown={addOnKeyDownItem}\n                       variant={\"outlined\"}\n            />\n\n            <IconButton onClick={addItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})","import React, {ChangeEvent, useCallback, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport function EditableSpan(props: EditableSpanPropsType) {\n\n    console.log(\"EditableSpan called\")\n\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = useCallback(() => {\n        setEditMode(true);\n        setTitle(props.value);\n    }, [props.value])\n\n    const activateViewMode = useCallback(() => {\n        setEditMode(false);\n        props.onChange(title);\n    },  [props.onChange])\n\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField variant=\"outlined\"\n                     value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n}\n","import React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskType} from \"./TodoList\";\n\ntype tasksForTodolist = {\n    id: string\n    isDone: boolean\n    title: string\n    todolistId: string\n    removeTask: (taskId: string, todolistId: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    tasksForTodolist: Array<TaskType>\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n}\n\nexport const Task = (props: tasksForTodolist) => {\n\n    const onClickHandler = useCallback(() => {\n        props.removeTask(props.id, props.todolistId)\n    }, [props.removeTask, props.id])\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked;\n        props.changeTaskStatus(props.id, newIsDoneValue, props.todolistId);\n    }, [props.changeTaskStatus, props.id])\n\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.id, newValue, props.todolistId);\n    }, [props.changeTaskTitle, props.id])\n\n    return (\n        <div key={props.id} className={props.isDone ? \"is-done\" : \"\"}>\n            <Checkbox\n                checked={props.isDone}\n                color=\"primary\"\n                onChange={onChangeHandler}\n            />\n\n            <EditableSpan value={props.title} onChange={onTitleChangeHandler}/>\n            <IconButton onClick={onClickHandler}>\n                <Delete/>\n            </IconButton>\n        </div>\n    )\n\n\n}","import React, {ChangeEvent, useCallback} from 'react';\nimport {FilterValuesType} from './App';\nimport {AddItemForm} from './AddItemForm';\nimport {EditableSpan} from './EditableSpan';\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {Task} from './Task';\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todolistId: string) => void\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    filter: FilterValuesType\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n}\n\nexport const TodoList = React.memo((props: PropsType) => {\n\n    console.log(\"Todolist called\")\n\n    let tasksForTodolist = props.tasks;\n\n    if (props.filter === \"active\") {\n        tasksForTodolist = props.tasks.filter(t => !t.isDone);\n    }\n    if (props.filter === \"completed\") {\n        tasksForTodolist = props.tasks.filter(t => t.isDone);\n    }\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id);\n    }, [props.addTask, props.id])\n\n    const removeTodolist = useCallback(() => {\n        props.removeTodolist(props.id);\n    }, [props.removeTodolist, props.id])\n\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.id, title);\n    }, [props.changeTodolistTitle, props.id])\n\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props.changeFilter, props.id]);\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props.changeFilter, props.id]);\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props.changeFilter, props.id]);\n\n    return <div>\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask}/>\n        {tasksForTodolist.map(t => {\n            return <Task removeTask={props.removeTask}\n                         todolistId={props.id}\n                         id={t.id}\n                         isDone={t.isDone}\n                         title={t.title}\n                         tasksForTodolist={tasksForTodolist}\n                         changeTaskStatus={props.changeTaskStatus}\n                         changeTaskTitle={props.changeTaskTitle}\n            />\n        })}\n\n        <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\n                onClick={onAllClickHandler}\n                color={'default'}\n        >All\n        </Button>\n        <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\n                onClick={onActiveClickHandler}\n                color={'primary'}>Active\n        </Button>\n        <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                onClick={onCompletedClickHandler}\n                color={'secondary'}>Completed\n        </Button>\n    </div>\n\n})\n\n\n","import {FilterValuesType, TodolistType} from '../AppWithReducers';\nimport {v1} from 'uuid';\n\nexport type RemoveTodolistActionType = {\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\nexport type AddTodolistActionType = {\n    type: 'ADD-TODOLIST'\n    title: string\n    todolistId: string\n}\nexport type ChangeTodolistTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE'\n    id: string\n    title: string\n}\nexport type ChangeTodolistFilterActionType = {\n    type: 'CHANGE-TODOLIST-FILTER'\n    id: string\n    filter: FilterValuesType\n}\n\nlet initialState: Array<TodolistType> = []\n\ntype ActionsType =\n    RemoveTodolistActionType\n    | AddTodolistActionType\n    | ChangeTodolistTitleActionType\n    | ChangeTodolistFilterActionType;\n\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST':\n            return state.filter(tl => tl.id != action.id)\n\n        case 'ADD-TODOLIST':\n            return [...state, {id: action.todolistId, title: action.title, filter: \"all\"}]\n\n        case 'CHANGE-TODOLIST-TITLE': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                todolist.title = action.title;\n            }\n            return [...state]\n        }\n\n        case 'CHANGE-TODOLIST-FILTER': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                todolist.filter = action.filter;\n            }\n            return [...state];\n        }\n\n        default:\n            return state\n    }\n}\n\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\n}\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\n    return {type: 'ADD-TODOLIST', title, todolistId: v1()}\n}\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\n    return {type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\n}\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\n    return {type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: todolistId}\n}\n","import {FilterValuesType, TasksStateType, TodolistType} from '../AppWithReducers';\nimport {v1} from 'uuid';\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\n\nexport type RemoveTaskActionType = {\n    type: 'REMOVE-TASK'\n    todolistId: string\n    taskId: string\n}\nexport type AddTaskActionType = {\n    type: 'ADD-TASK'\n    title: string\n    todolistId: string\n}\nexport type ChangeTaskStatusActionType = {\n    type: 'CHANGE-TASK-STATUS'\n    taskId: string\n    todolistId: string\n    isDone: boolean\n}\nexport type ChangeTaskTitleActionType = {\n    type: 'CHANGE-TASK-TITLE'\n    taskId: string\n    todolistId: string\n    title: string\n}\n\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\n    | ChangeTaskStatusActionType | ChangeTaskTitleActionType\n    | AddTodolistActionType | RemoveTodolistActionType;\n\nlet initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK': {\n            const stateCopy = {...state};\n            const tasks = state[action.todolistId];\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\n            stateCopy[action.todolistId] = filteredTasks;\n            return stateCopy;\n        }\n        case 'ADD-TASK': {\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n            const newTask = {id: v1(), title: action.title, isDone: false};\n            const newTasks = [newTask, ...tasks];\n            stateCopy[action.todolistId] = newTasks;\n            return stateCopy;\n        }\n        case 'CHANGE-TASK-STATUS': {\n            const stateCopy = {...state};\n\n            let tasks = stateCopy[action.todolistId];\n\n            let newTasksArray = tasks.map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t)\n            /*// найдём нужную таску:\n            let task = tasks.find(t => t.id === action.taskId);\n            //изменим таску, если она нашлась\n            if (task) {\n                task.isDone = action.isDone;\n            }*/\n            stateCopy[action.todolistId] = newTasksArray\n            return stateCopy;\n        }\n        case 'CHANGE-TASK-TITLE': {\n            const stateCopy = {...state};\n\n            let tasks = stateCopy[action.todolistId];\n            let newTaskArray = tasks.map(t => t.id === action.taskId ? {...t, title: action.title} : t)\n            /*// найдём нужную таску:\n            let task = tasks.find(t => t.id === action.taskId);\n            //изменим таску, если она нашлась\n            if (task) {\n                task.title = action.title;\n            }*/\n            stateCopy[action.todolistId] = newTaskArray\n            return stateCopy;\n        }\n        case 'ADD-TODOLIST': {\n            const stateCopy = {...state};\n\n            stateCopy[action.todolistId] = [];\n\n            return stateCopy;\n        }\n        case 'REMOVE-TODOLIST': {\n            const stateCopy = {...state};\n            delete stateCopy[action.id]\n            return stateCopy;\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\n    return {type: 'REMOVE-TASK', todolistId, taskId}\n}\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\n    return {type: 'ADD-TASK', title, todolistId}\n}\nexport const changeTaskStatusAC = (taskId: string,\n                                   isDone: boolean,\n                                   todolistId: string): ChangeTaskStatusActionType => {\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\n}\nexport const changeTaskTitleAC = (taskId: string,\n                                  title: string,\n                                  todolistId: string): ChangeTaskTitleActionType => {\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\n}\n\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from './TodoList';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/task-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n//type\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n    //get state\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    //get dispatch\r\n    const dispatch = useDispatch()\r\n\r\n    //functions for task\r\n    //id: string, todolistId: string\r\n    //dispatch removeTaskAC\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskAC(id, todolistId))\r\n    }, [])\r\n\r\n    //title: string, todolistId: string\r\n    //dispatch addTaskAC\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskAC(title, todolistId))\r\n    }, [])\r\n\r\n    //id: string, newTitle: string, todolistId: string\r\n    //dispatch changeTaskTitleAC\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(id, newTitle, todolistId))\r\n    }, [])\r\n\r\n    //id: string, isDone: boolean, todolistId: string\r\n    //dispatch changeTaskStatusAC\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId))\r\n    }, [])\r\n\r\n    //functions for todolist\r\n    //id: string\r\n    //dispatch removeTodolistAC\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistAC(id))\r\n        //dispatch(removeTodolistAC(id))\r\n    }, [])\r\n\r\n    //title: string\r\n    //dispatch addTodolistAC\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    }, [])\r\n\r\n    //value: \"all\" | \"active\" | \"completed\", todolistId: string\r\n    //dispatch changeTodolistFilterAC\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [])\r\n\r\n    //id: string, title: string\r\n    //dispatch changeTodolistTitleAC\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodolistTitleAC(id, title))\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <TodoList\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","/*import {tasksReducer} from './tasks-reducer';\nimport {todolistsReducer} from './todolists-reducer';*/\nimport {combineReducers, createStore} from 'redux';\nimport {tasksReducer} from \"./state/task-reducer\";\nimport {todolistsReducer} from \"./state/todolists-reducer\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App2 from \"./AlternativeTODO/App2\";\r\nimport AppWithReducers from \"./AppWithReducers\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store\";\r\n\r\n\r\n/*ReactDOM.render(<App />,  document.getElementById('root'));*/\r\n/*ReactDOM.render(<AppWithReducers />,  document.getElementById('root'));*/\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}