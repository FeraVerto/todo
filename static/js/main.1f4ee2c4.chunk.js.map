{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","className","TextField","value","label","helperText","onChange","e","currentTarget","onKeyDown","key","variant","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","TodoList","tasks","map","task","id","isDone","Checkbox","checked","changeTaskStatus","color","newValue","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","style","listStyle","padding","Button","size","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","todoListID","taskID","find","t","todoList","tl","todoListTasks","newTask","newFilterValue","console","log","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","todoListItem","spacing","tasksForTodoList","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1f4ee2c4.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox, Delete} from \"@material-ui/icons\";\n\ntype AddItemPropsType = {\n    addItem: (title: string) => void\n}\n\nexport function AddItemForm(props: AddItemPropsType) {\n    const [title, setTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n\n    const onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(null);\n        setTitle(e.currentTarget.value);\n    }\n\n    const addOnKeyDownItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem();\n        } else if (e.key === \"Escape\") {\n            setTitle(\"\");\n        }\n    }\n\n    const addItem = () => {\n        const trimmedTitle = title.trim();\n        if (trimmedTitle !== \"\") {\n            props.addItem(trimmedTitle);\n        } else {\n            setError(\"А че так пусто?\");\n        }\n        setTitle(\"\");\n    }\n\n    return (\n        <div className=\"todoListInput\">\n            <TextField value={title}\n                       error={!!error}\n                       label={\"Title\"}\n                       helperText={error}\n                       onChange={onTitleChangeHandler}\n                       onKeyDown={addOnKeyDownItem}\n                       variant={\"outlined\"}\n            />\n            {/*<button onClick={addItem}>+</button>*/}\n{/*\n            <Button onClick={addItem} variant={\"contained\"} color={\"primary\"}>+</Button>\n*/}\n            <IconButton onClick={addItem}>\n                <AddBox/>\n            </IconButton>\n           {/* {error && <div className={\"error-message\"}>{error}</div>*/}\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpan = {\n    title: string\n    onChange: (title: string) => void\n}\n\nexport function EditableSpan(props: EditableSpan) {\n\n    let [editMode, setEditMode] = useState(false)\n    let [title, setTitle] = useState(\"\")\n\n    let activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.title)\n    }\n\n    let onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    let activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n\n    return editMode ?\n        <TextField value={title}\n                   onChange={onChangeTitleHandler}\n                   onBlur={activateViewMode}\n                   variant={\"outlined\"}\n                   autoFocus/>\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {FilterValuesType, TaskType} from \"./App\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\nexport type TodoListPropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    removeTask: (taskID: string, todoListID: string) => void\n    changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\n    removeTodoList: (todoListID: string) => void\n    changeTaskTitle: (title: string, todoListID: string, taskID: string) => void\n    changeTodoListTitle: (id: string, title: string) => void\n}\n\nfunction TodoList(props: TodoListPropsType) {\n\n    const tasks = props.tasks.map(task => {\n        const onClickRemoveTask = () => props.removeTask(task.id, props.id)\n\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\n            props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\n        }\n\n        const changeTitleHandler = (newValue: string) => {\n            props.changeTaskTitle(newValue, props.id, task.id)\n        }\n        return (\n            <li key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\n                <Checkbox checked={task.isDone}\n                          onChange={changeTaskStatus}\n                          color={\"primary\"}\n                />\n\n\n                <EditableSpan title={task.title}\n                              onChange={changeTitleHandler}/>\n\n                <IconButton onClick={onClickRemoveTask}>\n                    <Delete/>\n                </IconButton>\n                {/*\n                <button className=\"buttonDelete\" onClick={onClickRemoveTask}>X</button>\n*/}\n            </li>\n        )\n    })\n\n    const onAllClickHandler = () => {\n        props.changeFilter('all', props.id);\n    }\n\n    const onActiveClickHandler = () => {\n        props.changeFilter('active', props.id);\n    }\n\n    const onCompletedClickHandler = () => {\n        props.changeFilter('completed', props.id);\n    }\n\n    const removeTodoList = () => {\n        props.removeTodoList(props.id)\n    }\n\n    const addTask = (title: string) => {\n        props.addTask(title, props.id)\n    }\n\n    const changeTodoListTitle = (title: string) => {\n        props.changeTodoListTitle(props.id, title)\n    }\n\n    return (\n        <div className=\"todoList\">\n            {/*<h3>{props.title}</h3>*/}\n            <EditableSpan title={props.title}\n                          onChange={changeTodoListTitle}/>\n\n            <IconButton onClick={removeTodoList}>\n                <Delete/>\n            </IconButton>\n\n            {/*<button onClick={removeTodoList}>X</button>*/}\n            <AddItemForm addItem={addTask}/>\n            <ul style={{listStyle: \"none\", padding: 0}}>\n                {\n                    tasks\n                }\n            </ul>\n            <div>\n                <Button size={\"small\"}\n                        variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\n                        color={\"default\"}\n                        onClick={onAllClickHandler}>All\n                </Button>\n                <Button size={\"small\"}\n                        variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\n                        color={\"primary\"}\n                        onClick={onActiveClickHandler}>Active\n                </Button>\n                <Button size={\"small\"}\n                        variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\n                        color={\"primary\"}\n                        onClick={onCompletedClickHandler}>Completed\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {AlternativeTODO} from \"./AlternativeTODO/AlternativeTODO\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\n//Вводим понятие тодо листа\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todoListID1 = v1()\r\n    const todoListID2 = v1()\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: \"What to Learn\", filter: \"all\"},\r\n        {id: todoListID2, title: \"What to Buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"HTML\", isDone: false},\r\n            {id: v1(), title: \"CSS\", isDone: false},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n\r\n        [todoListID2]: [\r\n            {id: v1(), title: \"Big Cat\", isDone: false},\r\n            {id: v1(), title: \"Cat\", isDone: true},\r\n            {id: v1(), title: \"Horse\", isDone: true},\r\n            {id: v1(), title: \"Rabbit\", isDone: true}\r\n        ]\r\n    })\r\n\r\n    function changeTaskTitle(title: string, todoListID: string, taskID: string) {\r\n        let todoListTasks = tasks[todoListID];\r\n        let task = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.title = title\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTodoListTitle(id: string, title: string) {\r\n        let todoList = todoLists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            todoList.title = title\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = todoListTasks.filter(task => task.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    /*Добавляем новую таску*/\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {id: v1(), title: title, isDone: false};\r\n        /*const todoList = tasks[todoListID]*/\r\n        tasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.filter = newFilterValue\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n\r\n        //find возвращает ссылку на обьект и изменения делают прямо в стейте\r\n        const task: TaskType | undefined = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    /*--------------------------------------------------------------------------------*/\r\n    //пробую добавить лист для тасок\r\n    let addTodoList = (title: string) => {\r\n        let todoListItem: TodoListType = {id: v1(), title: title, filter: 'all'}\r\n        setTodoLists([todoListItem, ...todoLists]);\r\n        tasks[todoListItem.id] = [];\r\n        setTasks({...tasks});\r\n    }\r\n    /*--------------------------------------------------------------------------------*/\r\n\r\n    console.log(tasks)\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed={true}>\r\n                <Grid container style={{padding: \"20px 0\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            let tasksForTodoList = tasks[tl.id]\r\n                            if (tl.filter === 'active') {\r\n                                tasksForTodoList = tasks[tl.id].filter(task => task.isDone === false);\r\n                            }\r\n                            if (tl.filter === 'completed') {\r\n                                tasksForTodoList = tasks[tl.id].filter(task => task.isDone === true);\r\n                            }\r\n                            return <Grid item>\r\n                                <Paper elevation={15} style={{padding:\"20px\"}}>\r\n                                    <TodoList key={tl.id}\r\n                                              id={tl.id}\r\n                                              title={tl.title}\r\n                                              tasks={tasksForTodoList}\r\n                                              removeTask={removeTask}\r\n                                              changeFilter={changeFilter}\r\n                                              addTask={addTask}\r\n                                              changeTaskStatus={changeTaskStatus}\r\n                                              filter={tl.filter}\r\n                                              removeTodoList={removeTodoList}\r\n                                              changeTaskTitle={changeTaskTitle}\r\n                                              changeTodoListTitle={changeTodoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n/*data binding привязка интерфейса к слою данных*/\r\n/*CRUD\r\n* -create\r\n* -update\r\n* -read\r\n* -delete*/\r\n\r\n/*function TaskFilter() {\r\nlet tasksForTodoList = tasks\r\nif (filter === 'active') {\r\ntasksForTodoList = tasks.filter(task => task.isDone === false);\r\n}\r\nif (filter === 'completed') {\r\ntasksForTodoList = tasks.filter(task => task.isDone === true);\r\n}\r\n}*/\r\n\r\n/*    const [tasks, setTasks] = useState<Array<TaskType>>([\r\n{id: v1(), title: \"React\", isDone: false},\r\n{id: v1(), title: \"HTML\", isDone: false},\r\n{id: v1(), title: \"CSS\", isDone: true},\r\n{id: v1(), title: \"JS\", isDone: true},\r\n{id: v1(), title: \"SASS\", isDone: true}\r\n]\r\n)\r\n\r\nconst [filter, setFilter] = useState<FilterValuesType>('all');*/\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App2 from \"./AlternativeTODO/App2\";\r\n\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n/*ReactDOM.render(<App2 />,  document.getElementById('root'));*/\r\n/*ReactDOM.render(<AppGame />,  document.getElementById('root'));*/\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}