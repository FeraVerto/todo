{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","state/todolists-reducer.ts","state/task-reducer.ts","AppWithReducers.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","className","TextField","value","label","helperText","onChange","e","currentTarget","onKeyDown","key","variant","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","TodoList","console","log","tasks","changeTodolistTitle","id","removeTodolist","Delete","addTask","map","t","isDone","Checkbox","checked","color","newIsDoneValue","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","initialState","todolistsReducer","state","action","type","tl","todolistId","todolist","find","removeTodolistAC","addTodolistAC","v1","tasksReducer","stateCopy","filteredTasks","taskId","newTask","newTasks","task","AppWithReducers","todolistId1","todolistId2","useReducer","todolists","dispatchToTodolists","dispatchToTasks","removeTaskAC","addTaskAC","newTitle","changeTaskTitleAC","changeStatus","changeTaskStatusAC","changeTodolistFilterAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","allTodolistTasks","tasksForTodolist","item","Paper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3e8ebc3a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox, Delete} from \"@material-ui/icons\";\n\ntype AddItemPropsType = {\n    addItem: (title: string) => void\n}\n\nexport function AddItemForm(props: AddItemPropsType) {\n    const [title, setTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n\n    const onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(null);\n        setTitle(e.currentTarget.value);\n    }\n\n    const addOnKeyDownItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem();\n        } else if (e.key === \"Escape\") {\n            setTitle(\"\");\n        }\n    }\n\n    const addItem = () => {\n        const trimmedTitle = title.trim();\n        if (trimmedTitle !== \"\") {\n            props.addItem(trimmedTitle);\n        } else {\n            setError(\"А че так пусто?\");\n        }\n        setTitle(\"\");\n    }\n\n    return (\n        <div className=\"todoListInput\">\n            <TextField value={title}\n                       error={!!error}\n                       label={\"Title\"}\n                       helperText={error}\n                       onChange={onTitleChangeHandler}\n                       onKeyDown={addOnKeyDownItem}\n                       variant={\"outlined\"}\n            />\n\n            <IconButton onClick={addItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport function EditableSpan(props: EditableSpanPropsType) {\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ?    <TextField variant=\"outlined\"\n                        value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n}\n","import React, {ChangeEvent} from 'react';\nimport {FilterValuesType} from './App';\nimport {AddItemForm} from './AddItemForm';\nimport {EditableSpan} from './EditableSpan';\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todolistId: string) => void\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    filter: FilterValuesType\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n}\n\nexport function TodoList(props: PropsType) {\n\n    console.log(props.tasks)\n\n    const addTask = (title: string) => {\n        props.addTask(title, props.id);\n    }\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.id);\n    }\n    const changeTodolistTitle = (title: string) => {\n        props.changeTodolistTitle(props.id, title);\n    }\n\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\n\n    return <div>\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask}/>\n        <div>\n            {\n                props.tasks.map(t => {\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n                        let newIsDoneValue = e.currentTarget.checked;\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\n                    }\n                    const onTitleChangeHandler = (newValue: string) => {\n                        props.changeTaskTitle(t.id, newValue, props.id);\n                    }\n\n\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\n                        <Checkbox\n                            checked={t.isDone}\n                            color=\"primary\"\n                            onChange={onChangeHandler}\n                        />\n\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler}/>\n                        <IconButton onClick={onClickHandler}>\n                            <Delete/>\n                        </IconButton>\n                    </div>\n                })\n            }\n        </div>\n        <div>\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'default'}\n            >All\n            </Button>\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n}\n\n\n","import {FilterValuesType, TodolistType} from '../AppWithReducers';\nimport {v1} from 'uuid';\n\nexport type RemoveTodolistActionType = {\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\nexport type AddTodolistActionType = {\n    type: 'ADD-TODOLIST'\n    title: string\n    todolistId: string\n}\nexport type ChangeTodolistTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE'\n    id: string\n    title: string\n}\nexport type ChangeTodolistFilterActionType = {\n    type: 'CHANGE-TODOLIST-FILTER'\n    id: string\n    filter: FilterValuesType\n}\n\nlet initialState: Array<TodolistType> = []\n\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType;\n\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST':\n            return state.filter(tl => tl.id != action.id)\n        case 'ADD-TODOLIST':\n            return [...state, {id: action.todolistId, title: action.title, filter: \"all\"}]\n        case 'CHANGE-TODOLIST-TITLE': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                todolist.title = action.title;\n            }\n            return [...state]\n        }\n        case 'CHANGE-TODOLIST-FILTER': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                todolist.filter = action.filter;\n            }\n            return [...state];\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\n}\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\n    return { type: 'ADD-TODOLIST', title, todolistId: v1()}\n}\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\n    return { type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\n}\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\n    return { type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: todolistId}\n}\n","import {FilterValuesType, TasksStateType, TodolistType} from '../AppWithReducers';\nimport {v1} from 'uuid';\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\n\nexport type RemoveTaskActionType = {\n    type: 'REMOVE-TASK'\n    todolistId: string\n    taskId: string\n}\nexport type AddTaskActionType = {\n    type: 'ADD-TASK'\n    title: string\n    todolistId: string\n}\nexport type ChangeTaskStatusActionType = {\n    type: 'CHANGE-TASK-STATUS'\n    taskId: string\n    todolistId: string\n    isDone: boolean\n}\nexport type ChangeTaskTitleActionType = {\n    type: 'CHANGE-TASK-TITLE'\n    taskId: string\n    todolistId: string\n    title: string\n}\n\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\n    | ChangeTaskStatusActionType | ChangeTaskTitleActionType\n    | AddTodolistActionType | RemoveTodolistActionType;\n\nlet initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK': {\n            const stateCopy = {...state};\n            const tasks = state[action.todolistId];\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\n            stateCopy[action.todolistId] = filteredTasks;\n            return stateCopy;\n        }\n        case 'ADD-TASK': {\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n            const newTask = {id: v1(), title: action.title, isDone: false};\n            const newTasks = [newTask, ...tasks];\n            stateCopy[action.todolistId] = newTasks;\n            return stateCopy;\n        }\n        case 'CHANGE-TASK-STATUS': {\n            const stateCopy = {...state};\n\n            let tasks = stateCopy[action.todolistId];\n            // найдём нужную таску:\n            let task = tasks.find(t => t.id === action.taskId);\n            //изменим таску, если она нашлась\n            if (task) {\n                task.isDone = action.isDone;\n            }\n            return stateCopy;\n        }\n        case 'CHANGE-TASK-TITLE': {\n            const stateCopy = {...state};\n\n            let tasks = stateCopy[action.todolistId];\n            // найдём нужную таску:\n            let task = tasks.find(t => t.id === action.taskId);\n            //изменим таску, если она нашлась\n            if (task) {\n                task.title = action.title;\n            }\n            return stateCopy;\n        }\n        case 'ADD-TODOLIST': {\n            const stateCopy = {...state};\n\n            stateCopy[action.todolistId] = [];\n\n            return stateCopy;\n        }\n        case 'REMOVE-TODOLIST': {\n            const stateCopy = {...state};\n            delete stateCopy[action.id]\n            return stateCopy;\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\n    return { type: 'REMOVE-TASK', todolistId, taskId }\n}\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\n    return { type: 'ADD-TASK', title, todolistId}\n}\nexport const changeTaskStatusAC = (taskId: string,\n                                   isDone: boolean,\n                                   todolistId: string): ChangeTaskStatusActionType => {\n    return { type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\n}\nexport const changeTaskTitleAC = (taskId: string,\n                                  title: string,\n                                  todolistId: string): ChangeTaskTitleActionType => {\n    return { type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\n}\n\n","import React, {useReducer} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from './TodoList';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    todolistsReducer\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./state/task-reducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithReducers() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, dispatchToTodolists] = useReducer(todolistsReducer, [\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, dispatchToTasks] = useReducer(tasksReducer, {\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        dispatchToTasks(removeTaskAC(id, todolistId))\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        dispatchToTasks(addTaskAC(title, todolistId))\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        dispatchToTasks(changeTaskTitleAC(id, newTitle, todolistId))\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        dispatchToTasks(changeTaskStatusAC(id, isDone, todolistId))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        dispatchToTodolists(changeTodolistFilterAC(todolistId, value))\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        dispatchToTodolists(removeTodolistAC(id))\r\n        dispatchToTasks(removeTodolistAC(id))\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        dispatchToTodolists(changeTodolistTitleAC(id, title))\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        dispatchToTodolists(addTodolistAC(title))\r\n        dispatchToTasks(addTodolistAC(title))\r\n    }\r\n\r\n\r\n    console.log(todolists)\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <TodoList\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithReducers;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App2 from \"./AlternativeTODO/App2\";\r\nimport AppWithReducers from \"./AppWithReducers\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\n\r\n/*ReactDOM.render(<App />,  document.getElementById('root'));*/\r\nReactDOM.render(<AppWithReducers />,  document.getElementById('root'));\r\n/*\r\nReactDOM.render(<AppWithRedux />,  document.getElementById('root'));\r\n*/\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}