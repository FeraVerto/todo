{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","state/todolists-reducer.ts","state/task-reducer.ts","AppWithRedux.tsx","store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","className","TextField","value","label","helperText","onChange","e","currentTarget","onKeyDown","key","variant","IconButton","onClick","AddBox","EditableSpan","console","log","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","task","id","todolistId","isDone","Checkbox","checked","color","newIsDoneValue","changeTaskStatus","removeTask","Delete","TodoList","addTask","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","map","Button","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","taskId","type","removeTaskAC","addTaskAC","newTitle","changeTaskTitleAC","changeStatus","changeTaskStatusAC","addTodolist","v1","addTodolistAC","changeTodolistFilterAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","item","Paper","rootReducer","combineReducers","action","stateCopy","filteredTasks","newTask","newTasks","todolistTasks","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.beb9abe7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype AddItemPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo((props: AddItemPropsType) => {\n\n    const [title, setTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n\n    //title change handler\n    const onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        error !== null && setError(null);\n        setTitle(e.currentTarget.value);\n    }\n\n    //add title on key down\n    const addOnKeyDownItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem();\n        } else if (e.key === \"Escape\") {\n            setTitle(\"\");\n        }\n    }\n\n    //add item on press button\n    const addItem = () => {\n        const trimmedTitle = title.trim();\n        if (trimmedTitle !== \"\") {\n            props.addItem(trimmedTitle);\n        } else {\n            setError(\"А че так пусто?\");\n        }\n        setTitle(\"\");\n    }\n\n    return (\n        <div className=\"todoListInput\">\n            <TextField value={title}\n                       error={!!error}\n                       label={\"Title\"}\n                       helperText={error}\n                       onChange={onTitleChangeHandler}\n                       onKeyDown={addOnKeyDownItem}\n                       variant={\"outlined\"}\n            />\n\n            <IconButton onClick={addItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})","import React, {ChangeEvent, useCallback, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n\n    console.log(\"EditableSpan called\")\n\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n\n    //здесь не надо было делать юзколлбэк, не редактировались таски и тодолист тайтл\n    //интересно почему\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField variant=\"outlined\"\n                     value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n})\n","import React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskType} from \"./TodoList\";\n\ntype taskType = {\n    task: any\n    /*id: string\n    isDone: boolean\n    title: string*/\n    todolistId: string\n    removeTask: (taskId: string, todolistId: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n}\n\nexport const Task = React.memo((props: taskType) => {\n\n    //изменено\n    const onClickHandler = () => {\n        props.removeTask(props.task.id, props.todolistId)\n    }\n    //изменено\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked;\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId);\n    }\n\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\n        //изменено\n    }, [props.changeTaskTitle, props.task.id, props.todolistId])\n\n    return (\n        <div key={props.task.id} className={props.task.isDone ? \"is-done\" : \"\"}>\n            <Checkbox\n                checked={props.task.isDone}\n                color=\"primary\"\n                onChange={onChangeHandler}\n            />\n\n            <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n            <IconButton onClick={onClickHandler}>\n                <Delete/>\n            </IconButton>\n        </div>\n    )\n\n\n})","import React, {useCallback} from 'react';\nimport {FilterValuesType} from './App';\nimport {AddItemForm} from './AddItemForm';\nimport {EditableSpan} from './EditableSpan';\nimport {Button, IconButton} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {Task} from './Task';\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todolistId: string) => void\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    filter: FilterValuesType\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n}\n\nexport const TodoList = React.memo((props: PropsType) => {\n    console.log(\"Todolist called\")\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id);\n    }, [props.addTask, props.id])\n\n    const removeTodolist = useCallback(() => {\n        props.removeTodolist(props.id);\n    }, [props.removeTodolist, props.id])\n\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.id, title);\n    }, [props.id, props.changeTodolistTitle])\n\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props.changeFilter, props.id]);\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props.changeFilter, props.id]);\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props.changeFilter, props.id]);\n\n    let tasksForTodolist = props.tasks;\n\n    if (props.filter === \"active\") {\n        tasksForTodolist = props.tasks.filter(t => !t.isDone);\n    }\n    if (props.filter === \"completed\") {\n        tasksForTodolist = props.tasks.filter(t => t.isDone);\n    }\n\n    return <div>\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask}/>\n        {\n            tasksForTodolist.map(t => {\n                return <Task removeTask={props.removeTask}\n                             todolistId={props.id}\n                             task={t}\n                             /*id={t.id}\n                             isDone={t.isDone}\n                             title={t.title}*/\n                             changeTaskStatus={props.changeTaskStatus}\n                             changeTaskTitle={props.changeTaskTitle}\n                             key={t.id}\n                />\n            })\n        }\n\n        <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\n                onClick={onAllClickHandler}\n                color={'default'}\n        >All\n        </Button>\n        <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\n                onClick={onActiveClickHandler}\n                color={'primary'}>Active\n        </Button>\n        <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                onClick={onCompletedClickHandler}\n                color={'secondary'}>Completed\n        </Button>\n    </div>\n\n})\n\n\n","import {FilterValuesType, TodolistType} from '../AppWithReducers';\nimport {v1} from 'uuid';\n\nexport type RemoveTodolistActionType = {\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\nexport type AddTodolistActionType = {\n    type: 'ADD-TODOLIST'\n    title: string\n    todolistId: string\n}\nexport type ChangeTodolistTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE'\n    id: string\n    title: string\n}\nexport type ChangeTodolistFilterActionType = {\n    type: 'CHANGE-TODOLIST-FILTER'\n    id: string\n    filter: FilterValuesType\n}\n\nlet initialState: Array<TodolistType> = []\n\ntype ActionsType =\n    RemoveTodolistActionType\n    | AddTodolistActionType\n    | ChangeTodolistTitleActionType\n    | ChangeTodolistFilterActionType;\n\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST':\n            return state.filter(tl => tl.id != action.id)\n\n        case 'ADD-TODOLIST':\n            return [...state, {id: action.todolistId, title: action.title, filter: \"all\"}]\n\n        case 'CHANGE-TODOLIST-TITLE': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                todolist.title = action.title;\n            }\n            return [...state]\n        }\n\n        case 'CHANGE-TODOLIST-FILTER': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                todolist.filter = action.filter;\n            }\n            return [...state];\n        }\n\n        default:\n            return state\n    }\n}\n\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\n}\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\n    return {type: 'ADD-TODOLIST', title, todolistId: v1()}\n}\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\n    return {type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\n}\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\n    return {type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: todolistId}\n}\n","import {FilterValuesType, TasksStateType, TodolistType} from '../AppWithReducers';\nimport {v1} from 'uuid';\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\n\nexport type RemoveTaskActionType = {\n    type: 'REMOVE-TASK'\n    todolistId: string\n    taskId: string\n}\nexport type AddTaskActionType = {\n    type: 'ADD-TASK'\n    title: string\n    todolistId: string\n}\nexport type ChangeTaskStatusActionType = {\n    type: 'CHANGE-TASK-STATUS'\n    taskId: string\n    todolistId: string\n    isDone: boolean\n}\nexport type ChangeTaskTitleActionType = {\n    type: 'CHANGE-TASK-TITLE'\n    taskId: string\n    todolistId: string\n    title: string\n}\n\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\n    | ChangeTaskStatusActionType | ChangeTaskTitleActionType\n    | AddTodolistActionType | RemoveTodolistActionType;\n\nlet initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK': {\n            const stateCopy = {...state};\n            const tasks = state[action.todolistId];\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\n            stateCopy[action.todolistId] = filteredTasks;\n            return stateCopy;\n        }\n        case 'ADD-TASK': {\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n            const newTask = {id: v1(), title: action.title, isDone: false};\n            const newTasks = [newTask, ...tasks];\n            stateCopy[action.todolistId] = newTasks;\n            return stateCopy;\n        }\n        case 'CHANGE-TASK-STATUS': {\n            let todolistTasks = state[action.todolistId];\n            state[action.todolistId] = todolistTasks\n                .map(t => t.id === action.taskId\n                    ? {...t, isDone: action.isDone}\n                    : t);\n            return ({...state});\n        }\n\n        case 'CHANGE-TASK-TITLE': {\n            let todolistTasks = state[action.todolistId];\n            state[action.todolistId] = todolistTasks\n                .map(t => t.id === action.taskId\n                    ? {...t, title: action.title}\n                    : t);\n            return ({...state});\n        }\n\n        case 'ADD-TODOLIST': {\n            const stateCopy = {...state};\n\n            stateCopy[action.todolistId] = [];\n\n            return stateCopy;\n        }\n        case 'REMOVE-TODOLIST': {\n            const stateCopy = {...state};\n            delete stateCopy[action.id]\n            return stateCopy;\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\n    return {type: 'REMOVE-TASK', todolistId, taskId}\n}\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\n    return {type: 'ADD-TASK', title, todolistId}\n}\nexport const changeTaskStatusAC = (taskId: string,\n                                   isDone: boolean,\n                                   todolistId: string): ChangeTaskStatusActionType => {\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\n}\n\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from './TodoList';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/task-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n//type\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n    //get state\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    //get dispatch\r\n    const dispatch = useDispatch()\r\n\r\n    //functions for task\r\n    //id: string, todolistId: string\r\n    //dispatch removeTaskAC\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskAC(id, todolistId))\r\n    }, [dispatch])\r\n\r\n    //title: string, todolistId: string\r\n    //dispatch addTaskAC\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskAC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    //id: string, newTitle: string, todolistId: string\r\n    //dispatch changeTaskTitleAC\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(id, newTitle, todolistId))\r\n    }, [dispatch])\r\n\r\n    //id: string, isDone: boolean, todolistId: string\r\n    //dispatch changeTaskStatusAC\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId))\r\n    }, [dispatch])\r\n\r\n    //functions for todolist\r\n    //id: string\r\n    //dispatch removeTodolistAC\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistAC(id))\r\n        //dispatch(removeTodolistAC(id))\r\n    }, [dispatch])\r\n\r\n    //title: string\r\n    //dispatch addTodolistAC\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    }, [dispatch])\r\n\r\n    //value: \"all\" | \"active\" | \"completed\", todolistId: string\r\n    //dispatch changeTodolistFilterAC\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [dispatch])\r\n\r\n    //id: string, title: string\r\n    //dispatch changeTodolistTitleAC\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodolistTitleAC(id, title))\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            //изменено\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <TodoList\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","/*import {tasksReducer} from './tasks-reducer';\nimport {todolistsReducer} from './todolists-reducer';*/\nimport {combineReducers, createStore} from 'redux';\nimport {tasksReducer} from \"./state/task-reducer\";\nimport {todolistsReducer} from \"./state/todolists-reducer\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App2 from \"./AlternativeTODO/App2\";\r\nimport AppWithReducers from \"./AppWithReducers\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store\";\r\n\r\n\r\n/*ReactDOM.render(<App />,  document.getElementById('root'));*/\r\n/*ReactDOM.render(<AppWithReducers />,  document.getElementById('root'));*/\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}